version: '3'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - observability

  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.0
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks:
      - observability

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:7.13.0
    container_name: metricbeat
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # monitoramento do docker do host (pc)
      - ./beats/metric/metricbeat.yaml:/usr/share/metricbeat/metricbeat.yaml
    restart: on-failure
    networks:
      - observability

  heartbeat:
    depends_on:
      - kibana
    image: docker.elastic.co/beats/heartbeat:7.13.0
    container_name: heatbeats
    volumes:
      - ./beats/heartbeat/heartbeat.yaml:/usr/share/heartbeat/heartbeat.yaml
    environment:
      - setup.kibana.host=kibana:5601
    networks:
      - observability

  apm:
    image: docker.elastic.co/apm/apm-server-oss:7.13.0
    container_name: apm
    volumes:
      - ./beats/apm/apm-server.yaml:/usr/share/apm/apm-server.yaml
    ports:
      - "8200:8200"
    restart: on-failure
    networks:
      - observability

  app:
    build: app
    volumes:
      - ./app/blog/:/home/python/app/blog/
    command:
      [
        "/bin/sh",
        "-c",
        "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
      ]

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "8080:80"

networks:
  observability:
    driver: bridge
